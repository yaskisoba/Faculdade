.data
	space: .asciz "\n"
	inval:	.asciz "Entrada invalida."
	sim: .asciz "sim"
	nao: .asciz "nao"
.text
	li a7, 5 #lendo a
	ecall
	
	mv s1, a0 # a em s1
	addi t1, t1, 1 # 1
	addi t2, t2, 2 # 2
	
	blez s1, invalido
	beq s1, t1, nao_primo
	beq s1, t2, primo
	rem t3, s1, t2
	beqz t3, nao_primo
	
	addi t4, t4, 1 # raiz = 1
	while:
		mul t5, t4, t4
		bgt t5, s1, fim_while
		addi t4, t4, 1
		jal while	
		
	fim_while:
		sub t4, t4, t1
	
	
	addi s3, s3, 3
	addi t4, t4, 1 # raiz + 1 para o for
	for:
		bge s3, t4, primo
		rem s4, s1, s3
		beqz s4, if
		
		addi s3, s3, 2
		jal for
		
		if: 
			bne s1, s3, nao_primo
			addi s3, s3, 2
			jal for
	
	
	invalido:
		li a7, 4
		la a0, inval
		ecall
		
		li a7, 4
		la a0, space
		ecall	
		
		jal fim
	nao_primo:
		li a7, 4
		la a0, nao
		ecall
		
		li a7, 4
		la a0, space
		ecall
		
		jal fim
	primo:
		li a7, 4
		la a0, sim
		ecall
		
		li a7, 4
		la a0, space
		ecall
		
		jal fim
	
	fim: 
	
		
		
	
